map_width = 1000
map_height = 650


class Map:
    def __init__(self, a):
        """
        Информация об объектах карты (стены и триггеры) хранится в ввиде двумерного массива, где 1 означает стену,
        а элементы большие 1 хранят в себе индекс триггера, которые они вызывают
        """
        self.1 = a
        self.map = [
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000",
            "00000000000000000000"
        ]

    def collision(self, x, y):
        """
        принимает на вход  координаты объекта и возвращает True если объект упирается в стену,
        False - если нет

        :param x: координата объекта по х
        :param y: координата объекта по у
        :return: True or False
        """
        object_square = [round(x * 20 / map_width), round(y * 20 / map_height)]
        if self.map[object_square[0]][object_square[1]] == "1":
            return True
        else:
            return False

    def trigger(self, x, y):
        """

        :param x: координата объекта по х
        :param y: координата объекта по y
        :return: Индекс триггера, если нажат триггер
        """
        object_square = [round(x * 20 / map_width), round(y * 20 / map_height)]
        if int(self.map[object_square[0]][object_square[1]]) > 1:
            return self.map[object_square[0]][object_square[1]]
        else:
            return False


Map1 = Map
Map1.map = [
    "11111111100000111111",
    "11111111100000111111",
    "11111111000000111111",
    "00000000000000001331",
    "00000000000000000000",
    "00000000000000000000",
    "00000000000000000000",
    "00000000000000111100",
    "00000100000111111100",
    "00000000000111111100",
    "00000000000111111100",
    "00000000000000020000",
    "00000000000000000000",
    "00000000000000000000",
    "00000000000000000000",
    "00000000000000000000",
    "00000000000000000000",
    "00000001111111111111",
    "00000001111111111111",
    "00000001111111111111"
]
